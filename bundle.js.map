{"version":3,"sources":["webpack:///webpack/bootstrap 1b24c04cae440dc3a411","webpack:///./lib/battle_tetris.js","webpack:///./lib/tetris.js","webpack:///./lib/board.js","webpack:///./lib/tetrominos.js"],"names":["Tetrominos","BattleTetris","$hook","keyBindings","bricks","dropBlocksOnOpponent","opponent","registerListener","initializeBricks","bind","cb","numBricks","brickLocation","i","randIdx","Math","floor","random","length","push","row","col","tetromino","brick","rotation","splice","movedBricks","move","setTimeout","dropBricks","currentTetromino","alert","clearedRows","clearRows","notifyListener","resetCurrentTetromino","play","dropInterval","board","render","document","addEventListener","rightGame","$","leftGame","UP","LEFT","RIGHT","DOWN","addOpponent","Tetris","clearedLines","DROP","handleKeypress","nextTetromino","randomTetromino","tetrominos","o","j","l","z","s","t","eachBlock","x","y","setBlock","undefined","removeTetromino","placeTetromino","isOccupied","rotateTetromino","dRow","dCol","newRow","newCol","moved","removedRows","gridHeight","complete","gridWidth","blockAt","string","removeRow","e","keyCode","rotateCurrentTetromino","drop","Board","grid","initializeGrid","Array","callback","tetrominoBlocks","rotations","currBit","occupied","testOccupation","Boolean","unshift","rowString","console","log","html","$tile","addClass","color","css","append"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1b24c04cae440dc3a411\n **/","import Tetris from './tetris.js';\nimport * as Tetrominos from './tetrominos';\n\nclass BattleTetris extends Tetris {\n  constructor($hook, keyBindings) {\n    super($hook, keyBindings);\n    this.bricks = [];\n    this.dropBlocksOnOpponent = null;\n  }\n\n  /**\n   *  Hold pointer to opponent BattleTetris instance\n   */\n  addOpponent(opponent) {\n    this.opponent = opponent;\n    this.registerListener(this.opponent.initializeBricks.bind(opponent));\n  }\n\n  /**\n   * accept callback from opponent (Observer design pattern)\n   */\n  registerListener(cb) {\n    this.dropBlocksOnOpponent = cb;\n  }\n\n  /**\n   * call callback on opponent to drop blocks on their board\n   */\n  notifyListener(numBricks) {\n    this.dropBlocksOnOpponent(numBricks);\n  }\n\n  /**\n   * Add numBricks bricks to this.bricks array\n   */\n  initializeBricks(numBricks) {\n    const brickLocation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    for (let i = 0; i < numBricks; i++) {\n      const randIdx = Math.floor(Math.random()*(brickLocation.length + 1));\n      this.bricks.push({\n        row: 0,\n        col: brickLocation[randIdx],\n        tetromino: Tetrominos.brick,\n        rotation: 0\n      });\n      brickLocation.splice(randIdx, 1);\n    }\n  }\n\n  /**\n   * Drop all unclearable bricks one tile if possible\n   */\n  dropBricks() {\n    const movedBricks = [];\n    for (let i = 0; i < this.bricks.length; i++) {\n      const brick = this.bricks[i];\n      if (this.move(1, 0, brick)) {\n        // release bricks that have fallen as far as possible\n        movedBricks.push(brick);\n      }\n    }\n    this.bricks = movedBricks;\n  }\n\n  /**\n   * Main gameplay loop - overwrite play() in Parent Class to accommodate\n   * brick functionality\n   */\n  play() {\n    setTimeout(function () {\n      this.dropBricks();\n      if (!this.move(1, 0)) {\n        if (this.currentTetromino.row === 0) {\n          alert ('you lose!');\n          return;\n        }\n        const clearedRows = this.clearRows();\n        // drop bricks on opponent if rows cleared\n        if (clearedRows) {\n          this.notifyListener(clearedRows);\n          // this.initializeBricks(clearedRows);\n        }\n        this.resetCurrentTetromino();\n      }\n      this.play();\n    }.bind(this), this.dropInterval);\n    this.board.render();\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const rightGame = new BattleTetris($('#right-board'));\n  const leftGame = new BattleTetris($('#left-board'), {\n    UP: 87,\n    LEFT: 65,\n    RIGHT: 68,\n    DOWN: 83\n  });\n  leftGame.addOpponent(rightGame);\n  rightGame.addOpponent(leftGame);\n  rightGame.play();\n  leftGame.play();\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/battle_tetris.js\n **/","import Board from './board';\nimport * as Tetrominos from './tetrominos';\n\nclass Tetris {\n  constructor($hook, keyBindings) {\n    this.$hook = $hook; // root div in index.html\n    this.board = new Board($hook);\n    this.dropInterval = 500; //milliseconds\n    this.clearedLines = 0;\n    this.resetCurrentTetromino();\n    this.keyBindings = keyBindings || {\n      UP: 38,\n      LEFT: 37,\n      RIGHT: 39,\n      DOWN: 40,\n      DROP: 32\n    };\n    document.addEventListener('keydown', this.handleKeypress.bind(this), false);\n  }\n\n  resetCurrentTetromino() {\n    this.currentTetromino = {\n      row: 0,\n      col: 4,\n      tetromino: this.nextTetromino || this.randomTetromino(),\n      rotation: 0\n    };\n    this.nextTetromino = this.randomTetromino();\n  }\n\n  randomTetromino() {\n    const tetrominos = [Tetrominos.o, Tetrominos.i, Tetrominos.j, Tetrominos.l,\n      Tetrominos.z, Tetrominos.s, Tetrominos.t];\n    return tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  }\n\n  removeTetromino(tetromino) {\n    this.board.eachBlock(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      tetromino.rotation,\n      function (x, y) {\n        this.board.setBlock(x, y, undefined);\n      }.bind(this)\n    );\n  }\n\n  removeCurrentTetromino() {\n    this.removeTetromino(this.currentTetromino);\n  }\n  //\n  // removeCurrentTetromino() {\n  //   this.board.eachBlock(\n  //     this.currentTetromino.row,\n  //     this.currentTetromino.col,\n  //     this.currentTetromino.tetromino,\n  //     this.currentTetromino.rotation,\n  //     function (x, y) {\n  //       this.board.setBlock(x, y, undefined);\n  //     }.bind(this)\n  //   );\n  // }\n  //\n  // placeCurrentTetromino() {\n  //   this.board.eachBlock(\n  //     this.currentTetromino.row,\n  //     this.currentTetromino.col,\n  //     this.currentTetromino.tetromino,\n  //     this.currentTetromino.rotation,\n  //     function (x, y) {\n  //       this.board.setBlock(x, y, this.currentTetromino.tetromino);\n  //     }.bind(this)\n  //   );\n  // }\n\n  placeTetromino(tetromino) {\n    this.board.eachBlock(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      tetromino.rotation,\n      function(x, y) {\n        this.board.setBlock(x, y, tetromino.tetromino);\n      }.bind(this)\n    );\n  }\n\n  placeCurrentTetromino() {\n    this.placeTetromino(this.currentTetromino);\n  }\n\n  rotateTetromino(tetromino) {\n    this.removeTetromino(tetromino);\n    if (!this.board.isOccupied(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      (tetromino.rotation + 1) % 4\n    )) {\n      tetromino.rotation =\n      (tetromino.rotation + 1) % 4;\n    }\n\n    this.placeTetromino(tetromino);\n  }\n\n  rotateCurrentTetromino() {\n    this.rotateTetromino(this.currentTetromino);\n  }\n\n  move(dRow, dCol, tetromino) {\n    if (!tetromino) tetromino = this.currentTetromino;\n\n    const newRow = tetromino.row + dRow;\n    const newCol = tetromino.col + dCol;\n    this.removeTetromino(tetromino);\n    let moved = false;\n\n    if (!this.board.isOccupied(newRow, newCol, tetromino.tetromino, tetromino.rotation)) {\n      tetromino.row = newRow;\n      tetromino.col = newCol;\n      moved = true;\n    }\n\n    this.placeTetromino(tetromino);\n    return moved;\n  }\n\n  /**\n   * Drop current piece as far as possible\n   */\n  drop() {\n    while (this.move(1, 0)) {\n      continue;\n    }\n  }\n\n  /**\n   * Remove completed rows from board, and update dropinterval as necessary\n   * Return number of rows cleared\n   */\n  clearRows() {\n    let removedRows = 0;\n    for (let row = 0; row < this.board.gridHeight; row++) {\n      let complete = true;\n      for (let col = 0; col < this.board.gridWidth; col++) {\n        if (\n          !this.board.blockAt(row, col) ||\n          this.board.blockAt(row,col).string === '#' // brick piece\n        ){\n          complete = false;\n          break;\n        }\n      }\n      if (complete) {\n        this.board.removeRow(row);\n        removedRows++;\n        row--;\n      }\n    }\n    return removedRows;\n  }\n\n  /**\n   * Handle user input according to given keyBindings\n   */\n  handleKeypress(e) {\n    switch (e.keyCode) {\n      case this.keyBindings.UP:\n        this.rotateCurrentTetromino();\n        break;\n      case this.keyBindings.LEFT:\n        this.move(0, -1);\n        break;\n      case this.keyBindings.RIGHT:\n        this.move(0, 1);\n        break;\n      case this.keyBindings.DOWN:\n        this.move(1, 0);\n        break;\n      case this.keyBindings.DROP:\n        this.drop();\n        break;\n    }\n    this.board.render();\n  }\n\n  /**\n   * Main gameplay loop\n   */\n  play() {\n    setTimeout(function () {\n      if (!this.move(1, 0)) {\n        if (this.currentTetromino.row === 0) {\n          alert ('you lose!');\n          return;\n        }\n        this.clearRows();\n        this.resetCurrentTetromino();\n      }\n      this.play();\n    }.bind(this), this.dropInterval);\n    this.board.render();\n  }\n}\n\n\nexport default Tetris;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/tetris.js\n **/","class Board {\n  constructor($hook) {\n    this.$hook = $hook; // root div in index.html\n    this.gridHeight = 20;\n    this.gridWidth = 10;\n    this.grid = this.initializeGrid();\n  }\n\n  /**\n   * initialize empty game grid\n   */\n  initializeGrid() {\n    const grid = [];\n    for (let i = 0; i < this.gridHeight; i++) {\n      grid.push(new Array(this.gridWidth));\n    }\n    return grid;\n  }\n\n  /**\n   * return the tetromino object at row, col (undefined if no tetromino)\n   */\n  blockAt(row, col) {\n    return this.grid[row][col];\n  }\n\n  /**\n   * set block at row, col to have the properties of the tetromino containing the block\n   */\n  setBlock(row, col, tetromino) {\n    this.grid[row][col] = tetromino;\n  }\n\n  /**\n   * set block at row, col to undefined\n   */\n  clearBlock(row, col) {\n    this.grid[row][col] = undefined;\n  }\n\n  /**\n   * perform callback function on each position of grid occupied by\n   * given tetromino located at (row, col) with given rotation.\n   */\n  eachBlock(row, col, tetromino, rotation, callback) {\n    let dRow = 0, dCol = 0;\n    let tetrominoBlocks = tetromino.rotations[rotation];\n    for (let currBit = 0b1000000000000000; currBit > 0; currBit >>= 1) {\n      if (currBit & tetrominoBlocks) {\n        callback(row + dRow, col + dCol);\n      }\n      dCol++;\n      if (dCol > 3) {\n        dCol = 0;\n        dRow++;\n      }\n    }\n  }\n  //\n  // /**\n  //  * Place tetromino at row, col\n  //  */\n  // placeTetromino(tetromino, row, col) {\n  //\n  // }\n\n  /**\n   *  Return true if any block tetromino of given rotation located at (row, col)\n   *  will take a space already occupied on the board.\n   */\n  isOccupied(row, col, tetromino, rotation) {\n    let occupied = false;\n\n    const testOccupation = function (i, j) {\n      if (i < 0 || j < 0 ||\n        i >= this.gridHeight ||\n        j >= this.gridWidth ||\n        Boolean(this.blockAt(i, j))\n      ){\n        occupied = true;\n      }\n    }.bind(this);\n\n    this.eachBlock(row, col, tetromino, rotation, testOccupation);\n\n    return occupied;\n  }\n\n  /**\n   * Delete row from grid, adding empty row to top of grid\n   */\n  removeRow(row) {\n    this.grid.splice(row, 1);\n    this.grid.unshift(new Array(this.gridWidth));\n  }\n\n  /**\n   * Display this.grid in console for debugging purposes\n   */\n  printGridToConsole() {\n    for (let row = 0; row < this.gridHeight; row++) {\n      let rowString = '';\n      for (let col = 0; col < this.gridWidth; col++) {\n        rowString += this.blockAt(row, col) ? this.grid[row][col].string : \"-\";\n        rowString += \" \";\n      }\n      console.log(rowString);\n    }\n  }\n\n  /**\n   * Update DOM to reflect current board state\n   */\n  render() {\n    this.$hook.html(\"\");\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const $tile = $(`<div id=r-${row}-c-${col}></div>`);\n        $tile.addClass('tile');\n        let color = 'rgb(255, 255, 255)';\n        if (this.blockAt(row, col)) {\n          color = this.blockAt(row, col).color;\n          $tile.addClass('block');\n        }\n        $tile.css('background-color', color);\n        this.$hook.append($tile);\n      }\n    }\n  }\n}\n\nexport default Board;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/board.js\n **/","/**\n * Tetrominos will be represented as 16-bit binary numbers, with each\n * bit representing a position on a 4x4 square grid:\n *  0  1  2  3\n *  4  5  6  7\n *  8  9 10 11\n * 12 13 14 15\n *\n * The o piece, for example, takes up sites 0, 1, 4, and 5, and can\n * therefore be represented by the binary number 0b1100 1100 0000 0000.\n *\n * In this way all of the pieces and all of their rotations can be\n * represented with very litte overhead. Additionally, this allows for\n * fast bit-level operations when iterating over all blocks in the game\n * grid.\n */\n\n// access n-th rotation of piece with o.rotations[n]\nexport const o = {\n  rotations: [\n    0b1100110000000000,\n    0b1100110000000000,\n    0b1100110000000000,\n    0b1100110000000000\n  ],\n  string: 'O',\n  color: 'rgb(255, 255, 0)'\n};\n\nexport const i = {\n  rotations: [\n    0b0100010001000100,\n    0b0000111100000000,\n    0b0010001000100010,\n    0b0000000011110000,\n  ],\n  string: 'I',\n  color: 'rgb(0, 231, 233)'\n};\n\nexport const t = {\n  rotations: [\n    0b0000111001000000,\n    0b0100110001000000,\n    0b0100111000000000,\n    0b0100011001000000\n  ],\n  string: 'T',\n  color: 'rgb(255, 0, 255)'\n};\n\nexport const l = {\n  rotations: [\n    0b0100010001100000,\n    0b0000111010000000,\n    0b1100010001000000,\n    0b0010111000000000\n  ],\n  string: 'L',\n  color: 'rgb(255, 128, 0)'\n};\n\nexport const j = {\n  rotations: [\n    0b0100010011000000,\n    0b1000111000000000,\n    0b0110010001000000,\n    0b0000111000100000\n  ],\n  string: 'J',\n  color: 'rgb(0, 0, 255)'\n};\n\nexport const s = {\n  rotations: [\n    0b0110110000000000,\n    0b0100011000100000,\n    0b0000011011000000,\n    0b1000110001000000\n  ],\n  string: 'S',\n  color: 'rgb(0, 255, 0)'\n};\n\nexport const z = {\n  rotations: [\n    0b1100011000000000,\n    0b0010011001000000,\n    0b0000110001100000,\n    0b0100110010000000\n  ],\n  string: 'Z',\n  color: 'rgb(255, 0, 0)'\n};\n\n// for battle tetris - the unclearable brick\nexport const brick = {\n  rotations: [\n    0b1000000000000000,\n    0b1000000000000000,\n    0b1000000000000000,\n    0b1000000000000000\n  ],\n  string: '#',\n  color: 'gray'\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/tetrominos.js\n **/"],"sourceRoot":""}