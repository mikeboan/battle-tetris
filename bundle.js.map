{"version":3,"sources":["webpack:///webpack/bootstrap 608b54c85d4b29477461","webpack:///./lib/battle_tetris.js","webpack:///./lib/tetris.js","webpack:///./lib/board.js","webpack:///./lib/tetrominos.js"],"names":["Tetrominos","BattleTetris","player","$hook","keyBindings","bricks","dropBlocksOnOpponent","opponent","registerListener","initializeBricks","bind","cb","numBricks","brickLocation","i","randIdx","Math","floor","random","length","push","row","col","tetromino","brick","rotation","splice","movedBricks","move","setTimeout","dropBricks","currentTetromino","alert","newlyClearedRows","clearRows","clearedRows","updateDropInterval","notifyListener","resetCurrentTetromino","board","render","play","dropInterval","document","addEventListener","rightGame","$","leftGame","UP","LEFT","RIGHT","DOWN","DROP","addOpponent","Tetris","handleKeypress","nextTetromino","randomTetromino","tetrominos","o","j","l","z","s","t","eachBlock","x","y","setBlock","undefined","removeTetromino","placeTetromino","isOccupied","rotateTetromino","dRow","dCol","newRow","newCol","moved","removedRows","gridHeight","complete","gridWidth","blockAt","string","removeRow","e","console","log","keyCode","rotateCurrentTetromino","drop","Board","grid","initializeGrid","Array","callback","tetrominoBlocks","rotations","currBit","occupied","testOccupation","Boolean","unshift","rowString","html","$tile","addClass","color","css","append"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 608b54c85d4b29477461\n **/","import Tetris from './tetris.js';\nimport * as Tetrominos from './tetrominos';\n\nclass BattleTetris extends Tetris {\n  constructor(player, $hook, keyBindings) {\n    super($hook, keyBindings);\n    this.player = player;\n    this.bricks = [];\n    this.dropBlocksOnOpponent = null;\n  }\n\n  /**\n   *  Hold pointer to opponent BattleTetris instance\n   */\n  addOpponent(opponent) {\n    this.opponent = opponent;\n    this.registerListener(this.opponent.initializeBricks.bind(opponent));\n  }\n\n  /**\n   * accept callback from opponent (Observer design pattern)\n   */\n  registerListener(cb) {\n    this.dropBlocksOnOpponent = cb;\n  }\n\n  /**\n   * call callback on opponent to drop blocks on their board\n   */\n  notifyListener(numBricks) {\n    this.dropBlocksOnOpponent(numBricks);\n  }\n\n  /**\n   * Add numBricks bricks to this.bricks array\n   */\n  initializeBricks(numBricks) {\n    const brickLocation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    for (let i = 0; i < numBricks; i++) {\n      const randIdx = Math.floor(Math.random()*(brickLocation.length + 1));\n      this.bricks.push({\n        row: 0,\n        col: brickLocation[randIdx],\n        tetromino: Tetrominos.brick,\n        rotation: 0\n      });\n      brickLocation.splice(randIdx, 1);\n    }\n  }\n\n  /**\n   * Drop all unclearable bricks one tile if possible\n   */\n  dropBricks() {\n    const movedBricks = [];\n    for (let i = 0; i < this.bricks.length; i++) {\n      const brick = this.bricks[i];\n      if (this.move(1, 0, brick)) {\n        // release bricks that have fallen as far as possible\n        movedBricks.push(brick);\n      }\n    }\n    this.bricks = movedBricks;\n  }\n\n  /**\n   * Main gameplay loop - overwrite play() in Parent Class to accommodate\n   * brick functionality\n   */\n  play() {\n    setTimeout(function () {\n      this.dropBricks();\n\n      if (!this.move(1, 0)) {\n        if (this.currentTetromino.row === 0) {\n          alert (`${this.player} loses!`);\n          return;\n        }\n        const newlyClearedRows = this.clearRows();\n        this.clearedRows += newlyClearedRows;\n        this.updateDropInterval();\n        // drop bricks on opponent if rows cleared\n        if (newlyClearedRows) this.notifyListener(newlyClearedRows);\n        this.resetCurrentTetromino();\n      }\n      this.board.render();\n      this.play();\n    }.bind(this), this.dropInterval);\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const rightGame = new BattleTetris(\"Player 2\", $('#right-board'));\n  const leftGame = new BattleTetris(\"Player 1\", $('#left-board'), {\n    UP: 87,\n    LEFT: 65,\n    RIGHT: 68,\n    DOWN: 83,\n    DROP: 81\n  });\n  leftGame.addOpponent(rightGame);\n  rightGame.addOpponent(leftGame);\n  rightGame.play();\n  leftGame.play();\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/battle_tetris.js\n **/","import Board from './board';\nimport * as Tetrominos from './tetrominos';\n\nclass Tetris {\n  constructor($hook, keyBindings) {\n    this.$hook = $hook; // root div in index.html\n    this.board = new Board($hook);\n    this.dropInterval = 500; //milliseconds\n    this.clearedRows = 0;\n    this.resetCurrentTetromino();\n    this.keyBindings = keyBindings || {\n      UP: 38,\n      LEFT: 37,\n      RIGHT: 39,\n      DOWN: 40,\n      DROP: 191\n    };\n    document.addEventListener('keydown', this.handleKeypress.bind(this), false);\n  }\n\n  resetCurrentTetromino() {\n    this.currentTetromino = {\n      row: 0,\n      col: 4,\n      tetromino: this.nextTetromino || this.randomTetromino(),\n      rotation: 0\n    };\n    this.nextTetromino = this.randomTetromino();\n  }\n\n  randomTetromino() {\n    const tetrominos = [Tetrominos.o, Tetrominos.i, Tetrominos.j, Tetrominos.l,\n      Tetrominos.z, Tetrominos.s, Tetrominos.t];\n    return tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  }\n\n  removeTetromino(tetromino) {\n    this.board.eachBlock(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      tetromino.rotation,\n      function (x, y) {\n        this.board.setBlock(x, y, undefined);\n      }.bind(this)\n    );\n  }\n\n  removeCurrentTetromino() {\n    this.removeTetromino(this.currentTetromino);\n  }\n\n  placeTetromino(tetromino) {\n    this.board.eachBlock(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      tetromino.rotation,\n      function(x, y) {\n        this.board.setBlock(x, y, tetromino.tetromino);\n      }.bind(this)\n    );\n  }\n\n  placeCurrentTetromino() {\n    this.placeTetromino(this.currentTetromino);\n  }\n\n  rotateTetromino(tetromino) {\n    this.removeTetromino(tetromino);\n    if (!this.board.isOccupied(\n      tetromino.row,\n      tetromino.col,\n      tetromino.tetromino,\n      (tetromino.rotation + 1) % 4\n    )) {\n      tetromino.rotation =\n      (tetromino.rotation + 1) % 4;\n    }\n\n    this.placeTetromino(tetromino);\n  }\n\n  rotateCurrentTetromino() {\n    this.rotateTetromino(this.currentTetromino);\n  }\n\n  move(dRow, dCol, tetromino) {\n    if (!tetromino) tetromino = this.currentTetromino;\n\n    const newRow = tetromino.row + dRow;\n    const newCol = tetromino.col + dCol;\n    this.removeTetromino(tetromino);\n    let moved = false;\n\n    if (!this.board.isOccupied(newRow, newCol, tetromino.tetromino, tetromino.rotation)) {\n      tetromino.row = newRow;\n      tetromino.col = newCol;\n      moved = true;\n    }\n\n    this.placeTetromino(tetromino);\n    return moved;\n  }\n\n  /**\n   * Drop current piece as far as possible\n   */\n  drop() {\n    while (this.move(1, 0)) {\n      continue;\n    }\n  }\n\n  /**\n   * Remove completed rows from board, and update dropinterval as necessary\n   * Return number of rows cleared\n   */\n  clearRows() {\n    let removedRows = 0;\n    for (let row = 0; row < this.board.gridHeight; row++) {\n      let complete = true;\n      for (let col = 0; col < this.board.gridWidth; col++) {\n        if (\n          !this.board.blockAt(row, col) ||\n          this.board.blockAt(row,col).string === '#' // brick piece\n        ){\n          complete = false;\n          break;\n        }\n      }\n      if (complete) {\n        this.board.removeRow(row);\n        removedRows++;\n        row--;\n      }\n    }\n    return removedRows;\n  }\n\n  updateDropInterval() {\n    if (this.dropInterval > 100) {\n      this.dropInterval = 500 - (10 * Math.floor(this.clearedRows / 10));\n    }\n  }\n\n  /**\n   * Handle user input according to given keyBindings\n   */\n  handleKeypress(e) {\n    console.log(e.keyCode);\n    switch (e.keyCode) {\n      case this.keyBindings.UP:\n        this.rotateCurrentTetromino();\n        break;\n      case this.keyBindings.LEFT:\n        this.move(0, -1);\n        break;\n      case this.keyBindings.RIGHT:\n        this.move(0, 1);\n        break;\n      case this.keyBindings.DOWN:\n        this.move(1, 0);\n        break;\n      case this.keyBindings.DROP:\n        this.drop();\n        break;\n    }\n    this.board.render();\n  }\n\n  /**\n   * Main gameplay loop\n   */\n  play() {\n    setTimeout(function () {\n      if (!this.move(1, 0)) {\n        if (this.currentTetromino.row === 0) {\n          alert ('you lose!');\n          return;\n        }\n        this.clearRows();\n        this.resetCurrentTetromino();\n      }\n      this.play();\n    }.bind(this), this.dropInterval);\n    this.board.render();\n  }\n}\n\n\nexport default Tetris;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/tetris.js\n **/","class Board {\n  constructor($hook) {\n    this.$hook = $hook; // root div in index.html\n    this.gridHeight = 20;\n    this.gridWidth = 10;\n    this.grid = this.initializeGrid();\n  }\n\n  /**\n   * initialize empty game grid\n   */\n  initializeGrid() {\n    const grid = [];\n    for (let i = 0; i < this.gridHeight; i++) {\n      grid.push(new Array(this.gridWidth));\n    }\n    return grid;\n  }\n\n  /**\n   * return the tetromino object at row, col (undefined if no tetromino)\n   */\n  blockAt(row, col) {\n    return this.grid[row][col];\n  }\n\n  /**\n   * set block at row, col to have the properties of the tetromino containing the block\n   */\n  setBlock(row, col, tetromino) {\n    this.grid[row][col] = tetromino;\n  }\n\n  /**\n   * set block at row, col to undefined\n   */\n  clearBlock(row, col) {\n    this.grid[row][col] = undefined;\n  }\n\n  /**\n   * perform callback function on each position of grid occupied by\n   * given tetromino located at (row, col) with given rotation.\n   */\n  eachBlock(row, col, tetromino, rotation, callback) {\n    let dRow = 0, dCol = 0;\n    let tetrominoBlocks = tetromino.rotations[rotation];\n    for (let currBit = 0b1000000000000000; currBit > 0; currBit >>= 1) {\n      if (currBit & tetrominoBlocks) {\n        callback(row + dRow, col + dCol);\n      }\n      dCol++;\n      if (dCol > 3) {\n        dCol = 0;\n        dRow++;\n      }\n    }\n  }\n  //\n  // /**\n  //  * Place tetromino at row, col\n  //  */\n  // placeTetromino(tetromino, row, col) {\n  //\n  // }\n\n  /**\n   *  Return true if any block tetromino of given rotation located at (row, col)\n   *  will take a space already occupied on the board.\n   */\n  isOccupied(row, col, tetromino, rotation) {\n    let occupied = false;\n\n    const testOccupation = function (i, j) {\n      if (i < 0 || j < 0 ||\n        i >= this.gridHeight ||\n        j >= this.gridWidth ||\n        Boolean(this.blockAt(i, j))\n      ){\n        occupied = true;\n      }\n    }.bind(this);\n\n    this.eachBlock(row, col, tetromino, rotation, testOccupation);\n\n    return occupied;\n  }\n\n  /**\n   * Delete row from grid, adding empty row to top of grid\n   */\n  removeRow(row) {\n    this.grid.splice(row, 1);\n    this.grid.unshift(new Array(this.gridWidth));\n  }\n\n  /**\n   * Display this.grid in console for debugging purposes\n   */\n  printGridToConsole() {\n    for (let row = 0; row < this.gridHeight; row++) {\n      let rowString = '';\n      for (let col = 0; col < this.gridWidth; col++) {\n        rowString += this.blockAt(row, col) ? this.grid[row][col].string : \"-\";\n        rowString += \" \";\n      }\n      console.log(rowString);\n    }\n  }\n\n  /**\n   * Update DOM to reflect current board state\n   */\n  render() {\n    this.$hook.html(\"\");\n    for (let row = 0; row < this.gridHeight; row++) {\n      for (let col = 0; col < this.gridWidth; col++) {\n        const $tile = $(`<div id=r-${row}-c-${col}></div>`);\n        $tile.addClass('tile');\n        // let color = 'rgb(255, 255, 255)';\n        if (this.blockAt(row, col)) {\n          let color = this.blockAt(row, col).color;\n          $tile.css('background-color', color);\n          $tile.addClass('block');\n          $tile.addClass(this.blockAt(row, col).string);\n        }\n        this.$hook.append($tile);\n      }\n    }\n  }\n}\n\nexport default Board;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/board.js\n **/","/**\n * Tetrominos will be represented as 16-bit binary numbers, with each\n * bit representing a position on a 4x4 square grid:\n *  0  1  2  3\n *  4  5  6  7\n *  8  9 10 11\n * 12 13 14 15\n *\n * The o piece, for example, takes up sites 0, 1, 4, and 5, and can\n * therefore be represented by the binary number 0b1100 1100 0000 0000.\n *\n * In this way all of the pieces and all of their rotations can be\n * represented with very litte overhead. Additionally, this allows for\n * fast bit-level operations when iterating over all blocks in the game\n * grid.\n */\n\n// access n-th rotation of piece with o.rotations[n]\nexport const o = {\n  rotations: [\n    0b1100110000000000,\n    0b1100110000000000,\n    0b1100110000000000,\n    0b1100110000000000\n  ],\n  string: 'O',\n  color: 'rgb(255, 255, 0)'\n};\n\nexport const i = {\n  rotations: [\n    0b0100010001000100,\n    0b0000111100000000,\n    0b0010001000100010,\n    0b0000000011110000,\n  ],\n  string: 'I',\n  color: 'rgb(0, 231, 233)'\n};\n\nexport const t = {\n  rotations: [\n    0b0000111001000000,\n    0b0100110001000000,\n    0b0100111000000000,\n    0b0100011001000000\n  ],\n  string: 'T',\n  color: 'rgb(255, 0, 255)'\n};\n\nexport const l = {\n  rotations: [\n    0b0100010001100000,\n    0b0000111010000000,\n    0b1100010001000000,\n    0b0010111000000000\n  ],\n  string: 'L',\n  color: 'rgb(255, 128, 0)'\n};\n\nexport const j = {\n  rotations: [\n    0b0100010011000000,\n    0b1000111000000000,\n    0b0110010001000000,\n    0b0000111000100000\n  ],\n  string: 'J',\n  color: 'rgb(0, 0, 255)'\n};\n\nexport const s = {\n  rotations: [\n    0b0110110000000000,\n    0b0100011000100000,\n    0b0000011011000000,\n    0b1000110001000000\n  ],\n  string: 'S',\n  color: 'rgb(0, 255, 0)'\n};\n\nexport const z = {\n  rotations: [\n    0b1100011000000000,\n    0b0010011001000000,\n    0b0000110001100000,\n    0b0100110010000000\n  ],\n  string: 'Z',\n  color: 'rgb(255, 0, 0)'\n};\n\n// for battle tetris - the unclearable brick\nexport const brick = {\n  rotations: [\n    0b1000000000000000,\n    0b1000000000000000,\n    0b1000000000000000,\n    0b1000000000000000\n  ],\n  string: 'B',\n  color: 'gray'\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/tetrominos.js\n **/"],"sourceRoot":""}